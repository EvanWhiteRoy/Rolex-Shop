<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>